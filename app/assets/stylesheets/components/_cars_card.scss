
// .card {
//   height: 250px;
//   width: 300px;
//   // text-shadow: 0 1px 3px rgba(0,0,0,0.6);
//   //background-size: cover !important;
//   // background-position: center;
//   color: white;
//   position: relative;
//   background-color: grey;
//   margin-bottom: 3rem;
//   background-color: white;
//   border: 2px solid white;
//   border-radius: 5px;
//   box-shadow: 2px 2px 3px rgba(0,0,0,0.6);
// }

// .card-header {
//   height: 25%;
//   width: 100%;
//   position: absolute;
//   top: 0px;
//   left: 0px;
//   // background: linear-gradient(to top, #3e00ff, #f1a9ff);
//   // background-color: lightgrey;
// }

// .card-header h2 {
//   margin-left: 10px;
//   margin-top: 10px;
//   font-size: 24px;
//   color: rgba(0,0,0,0.8);
//   margin-bottom: 0px;
// }

// .card-header p {
//   margin-top: 0px;
//   margin-left: 10px;
//   font-size: 14px;
//   color: rgba(0,0,0,0.4);
// }

// .card-footer {
//   text-decoration: none;
//   height: 15%;
//   width: 100%;
//   position: absolute;
//   bottom: 0px;

//   display: flex;
//   justify-content: space-between;
//   //align-items: center;

//   padding: 10px;
//   font-size: 14px;
//   color: rgba(0,0,0,0.6);
//   // background: linear-gradient(to bottom, #3e00ff, #f1a9ff);
// }

// .card-price{
//   position: absolute;
//   left: 0px;
//   top: -100%;
//   height: 25px;
//   width: 50px;
//   background-color: black;
//   color: yellow;
// }

// .card-gallery {
//   height: 60%;
//   width: 100%;
//   text-shadow: 0 1px 3px rgba(0,0,0,0.6);
//   background-size: cover !important;
//   background-position: center;
//   color: white;
//   position: absolute;
//   top: 25%;

//   //background-color: green;
//   //padding: 50px;
// }

// // ******************************************************************
// //                      SEARCH BAR
// // ******************************************************************


// .search-bar {
//   border-radius: 30px;// 0px 0px 30px;
//   align-items: center;
//   text-align: center;
//   border: 3px solid red;
//   /*border-radius: Top-left, Top-right, Bottom-right, Bottom-left;*/
// }

// .search-form {
//   border-radius: 30px 0px 0px 30px;
//   align-items: center;
//   text-align: center;
//  /* width: 550px;*/
//   /*border-radius: Top-left, Top-right, Bottom-right, Bottom-left;*/
// }

// .search-btn {
//   border-radius: 0px 30px 30px 0px;
//   cursor:pointer;
//   background-color: red;
//   width:200px;
//  }


// // ******************************************************************
// //                      FLIP
// // ******************************************************************


// .flip {
//     margin-top: 1%;
//     position: relative;
//     >.front,
//     >.back {
//         display: block;
//         transition-timing-function: cubic-bezier(.175, .885, .32, 1.275);
//         transition-duration: .5s;
//         transition-property: transform, opacity;
//     }
//     >.front {
//         transform: rotateY(0deg);
//     }
//     >.back {
//         position: absolute;
//         opacity: 0;
//         top: 0px;
//         left: 0px;
//         width: 100%;
//         height: 100%;
//         transform: rotateY(-180deg);
//     }
//     &:hover {
//         >.front {
//             transform: rotateY(180deg);
//         }
//         >.back {
//             opacity: 1;
//             transform: rotateY(0deg);
//         }
//     }
//     &.flip-vertical {
//         >.back {
//             transform: rotateX(-180deg);
//         }
//         &:hover {
//             >.front {
//                 transform: rotateX(180deg);
//             }
//             >.back {
//                 transform: rotateX(0deg);
//             }
//         }
//     }
// }

// // custom
// .flip {
//     position: relative;
//     display: inline-block;
//     margin-right: 2px;
//     margin-bottom: 2em;
//     width: 100%;
//     >.front,
//     >.back {
//       display: block;
//       color: white;
//       width: inherit;
//       background-size: cover!important;
//       background-position: center!important;
//       height: 190px;
//       padding: 01em 02em;
//       background: #313131;
//       border-radius: 10px;
//       p {
//         font-size: 0.9125rem;
//         line-height: 160%;
//         color: #999;
//       }
//     }
// }

// .text-shadow {
// text-shadow: 1px 1px rgba(0, 0, 0, 0.04), 2px 2px rgba(0, 0, 0, 0.04), 3px 3px rgba(0, 0, 0, 0.04), 4px 4px rgba(0, 0, 0, 0.04), 0.125rem 0.125rem rgba(0, 0, 0, 0.04), 6px 6px rgba(0, 0, 0, 0.04), 7px 7px rgba(0, 0, 0, 0.04), 8px 8px rgba(0, 0, 0, 0.04), 9px 9px rgba(0, 0, 0, 0.04), 0.3125rem 0.3125rem rgba(0, 0, 0, 0.04), 11px 11px rgba(0, 0, 0, 0.04), 12px 12px rgba(0, 0, 0, 0.04), 13px 13px rgba(0, 0, 0, 0.04), 14px 14px rgba(0, 0, 0, 0.04), 0.625rem 0.625rem rgba(0, 0, 0, 0.04), 16px 16px rgba(0, 0, 0, 0.04), 17px 17px rgba(0, 0, 0, 0.04), 18px 18px rgba(0, 0, 0, 0.04), 19px 19px rgba(0, 0, 0, 0.04), 1.25rem 1.25rem rgba(0, 0, 0, 0.04);
// }


// // ******************************************************************
// //                      FLIP CARD PRICE
// // ******************************************************************


// .card-price2{
//   position: absolute;
//   left: 0px;
//   top: 70%;
//   height: 25px;
//   width: 80px;
//   background-color: orange;
//   color: black;
//   font-size: 40px;
// }

// .card-price2 p{
//   color: red;
//   font-size: 40px;
// }

// // ******************************************************************
// //                      RATING
// // ******************************************************************


//   .rating {
//     //grid-row: 3;
//     color: rgba(25, 55, 25, 0.8);
//     font-size: 14px;
//     display: flex;
//     flex-flow: row nowrap;
//     i {
//       margin: 0 1px;
//     }
//   }

// ////
// /// Star Rating
// /// @group components
// /// @author Dami√°n Muti
// ////

// @import url('https://fonts.googleapis.com/css?family=Roboto+Slab:400');

// ///
// $rating-min-value: 0 !default;
// ///
// $rating-max-value: 5 !default;
// ///
// $rating-steps-value: 1 !default;
// ///
// $rating-color-empty: '%23ddd' !default;
// ///
// $rating-color-full: purple !default; //gold
// ///
// $rating-color-hover: red !default;
// /// This variable is a map containing the "d" attribute of each of the SVG icons
// $rating-icons-paths: (
//   quarter: 'M196.208 415.2v-224.8l-139.504 20.272 100.944 98.384-23.84 138.928z',
//   half: 'M258.672 64l-62.384 126.4-139.504 20.272 100.944 98.384-23.84 138.928 124.768-65.6v-318.4z',
//   three-quarters: 'M321.616 190.496l-0.656-0.096-62.384-126.4-62.384 126.4-139.504 20.272 100.944 98.384-23.84 138.928 124.768-65.6 63.024 33.136z',
//   full: 'M457.888 210.672l-139.504-20.272-62.384-126.4-62.384 126.4-139.504 20.272 100.944 98.384-23.84 138.928 124.768-65.6 124.768 65.6-23.84-138.928c0 0 100.944-98.384 100.944-98.384z'
// );

// /// Creates a dynamic list of values that increment each .25 from 0 to 5
// /// @return {list}
// @function rating-values() {
//   $rating-values: ();

//   @for $i from $rating-min-value through ($rating-max-value / $rating-steps-value) {
//     $rating-value: abs($i * $rating-steps-value);
//     $rating-values: append($rating-values, $rating-value, 'comma');
//   }

//   @return $rating-values;
// }

// /// Generates an SVG with a given fill color depending on the type of icon passed as parameter. The SVG string is scaped for cross-browser support.
// /// @param {string} $icon - Type of icon. Accepted values: `quarter`, `half`, `three-quarters` or `full`.
// /// @param {color} $color - Passes the fill color of the SVG icon that is being generated. Note: Hexa color values must be escaped for cross-browser support.
// /// @return {string} background value.
// @function get-icon($icon, $color) {
//   @if not index(quarter half three-quarters full, $icon) {
//     @error "Interaction type must be either `quarter`, `half`, `three-quarters` or `full`.";
//   }

//   @return url('data:image/svg+xml;utf8,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20width%3D%22512%22%20height%3D%22512%22%20viewBox%3D%220%200%20512%20512%22%3E%3Cpath%20fill%3D%22' + $color + '%22%20d%3D%22' + map-get($rating-icons-paths, $icon) + '%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E') center / cover no-repeat;
// }

// /// This is a CSS-only star rating component that shows the proper rating depending on a data-attribute value. JS logic behind this component should round up values per quarter.
// /// @param {number} $star-size [20px] - Provides width and height for each of the stars.
// /// @param {string} $rating-element [button] - Element to use for each of the stars.
// /// @param {string} $interaction-type [representative] - Indicates whether this component should be clickable or representative. Accepted values: `clickable` or `representative`.
// /// @example scss
// ///   .class {
// ///     c-rating(toem(20px), button, clickable);
// ///   }
// /// @example markup
// ///   <div class="c-rating" data-rating-value="3.25">
// ///     <span>1</span>
// ///     <span>2</span>
// ///     <span>3</span>
// ///     <span>4</span>
// ///     <span>5</span>
// ///   </div>
// @mixin c-rating($star-size: 20px, $star-element: button, $interaction-type: representative) {
//   @if not index(clickable representative, $interaction-type) {
//     @error "Interaction type must be either `clickable` or `representative`.";
//   }

//   #{$star-element} {
//     display: inline-block;
//     float: left;
//     width: $star-size;
//     height: $star-size;
//     border: 0;
//     text-indent: -9999px;
//     outline: none;
//     background: get-icon(full, $rating-color-empty);

//     @if $interaction-type == clickable {
//       cursor: pointer;
//       transition: background 0.25s ease;

//       // Override background images on hover state
//       &:hover,
//       &:hover ~ #{$star-element} {
//         background: get-icon(full, $rating-color-empty) !important;
//       }
//     }
//   }

//   // Override background images on hover state
//   @if $interaction-type == clickable {
//     &:hover {
//       #{$star-element} {
//         background: get-icon(full, $rating-color-hover) !important;
//       }
//     }
//   }

//   @each $rating-value in rating-values() {
//     // Get the next higher integer.
//     $rating-value-ceil: ceil($rating-value);

//     &[data-rating-value="#{$rating-value}"] {
//       #{$star-element}:nth-child(-n+#{$rating-value-ceil}) {
//         background: get-icon(full, $rating-color-full);
//       }

//       #{$star-element}:nth-child(#{$rating-value-ceil}) {
//         // Evaluate which fraction of a star this value is and add the proper background
//         @if str-slice("#{$rating-value}", 2, 4) == '.25' {
//           background: get-icon(quarter, $rating-color-full), get-icon(full, $rating-color-empty)
//         }
//         @else if str-slice("#{$rating-value}", 2, 4) == '.5' {
//           background: get-icon(half, $rating-color-full), get-icon(full, $rating-color-empty)
//         }
//         @else if str-slice("#{$rating-value}", 2, 4) == '.75' {
//           background: get-icon(three-quarters, $rating-color-full), get-icon(full, $rating-color-empty)
//         }
//       }
//     }
//   }
// }

// /*
//  * General styles.
//  * Not necessary for the component to work
// */

// /// Convert to EMs function
// /// @param {number} target - The value to be converted
// /// @param {number} context [$msuxf-font-size] The base font size
// /// @return {em} value


// @function toem($target, $context: 16px) {
//   @if $target == 0 {
//     @return 0
//   }

//   @return $target / $context+0em;
// }



// .rating-holder {
//   display: inline-block;
//   position: absolute;
//   right: 0%;
//   top: 5%;
//   padding: toem(10px) toem(0px);
//   margin: 0 10px;
//   // background-color: #fff;
//   border-radius: toem(25px);
//   box-sizing: border-box;
// }

// .c-rating {
//   @include c-rating(toem(30px), button); //clickable

//   &--small {
//     font-size: 50%
//   }

//   &--big {
//     font-size: 150%;
//   }
// }

